
套接字(socket)是一个抽象层，应用程序可以通过它发送或接收数据，
可对其进行对文件一样的打开，读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，
并与网络中的其他应用程序进行通信。
网络套接字是IP地址与端口的组合


套接字是一种独立与协议的网络编程接口

类型：流式套接字，数据报套套接字和原始套接字

作用：完成两个应用程序之间的数据传输


传输层实现端到端的通信，因此每一个传输层连接有两个端点。

传输层连接的端点叫做套接字。
所谓套接字，实际上是一个通信端点，每个套接字豆油一个套接字序号，
包括主机的IP地址与一个１６位的主机端口号，
即形如(主机IP地址：端口号)
ip:210.37.145.1
端口号：２３

此时套接字就是(210.37.145.1:23)

总之，套接字Socket=(IP地址：端口号)，套接字的表示方法是点分
十进制的IP地址后面写上端口号，中间用冒号或逗号隔开。
每一个传输层连接唯一地被通信两端的两个端点(即两个套接字)所确定


套接字可以看成是两个网络应用程序进行通信时，各自通信连接中的一个端点。通信时，其中的一个网络应用程序将要传输的一段信息写入它所在主机的Socket中，该Socket通过网络接口卡的传输介质将这段信息发送给另一台主机的Socket中，使这段信息能传送到其他程序中。因此，两个应用程序之间的数据传输要通过套接字来完成。
在网络应用程序设计时，由于TCP/IP的核心内容被封装在操作系统中，如果应用程序要使用TCP/IP，可以通过系统提供的TCP/IP的编程接口来实现。在Windows环境下，网络应用程序编程接口称作Windows Socket。为了支持用户开发面向应用的通信程序，大部分系统都提供了一组基于TCP或者UDP的应用程序编程接口（API），该接口通常以一组函数的形式出现，也称为套接字（Socket）。 [1] 

分类编辑
为了满足不同的通信程序对通信质量和性能的要求，一般的网络系统提供了三种不同类型的套接字，以供用户在设计网络应用程序时根据不同的要求来选择。这三种套接为流式套接字（SOCK-STREAM）、数据报套接字（SOCK-DGRAM）和原始套接字（SOCK-RAW）。
（1）流式套接字。它提供了一种可靠的、面向连接的双向数据传输服务，实现了数据无差错、无重复的发送。流式套接字内设流量控制，被传输的数据看作是无记录边界的字节流。在TCP/IP协议簇中，使用TCP协议来实现字节流的传输，当用户想要发送大批量的数据或者对数据传输有较高的要求时，可以使用流式套接字。
（2）数据报套接字。它提供了一种无连接、不可靠的双向数据传输服务。数据包以独立的形式被发送，并且保留了记录边界，不提供可靠性保证。数据在传输过程中可能会丢失或重复，并且不能保证在接收端按发送顺序接收数据。在TCP/IP协议簇中，使用UDP协议来实现数据报套接字。在出现差错的可能性较小或允许部分传输出错的应用场合，可以使用数据报套接字进行数据传输，这样通信的效率较高。
（3）原始套接字。该套接字允许对较低层协议（如IP或ICMP）进行直接访问，常用于网络协议分析，检验新的网络协议实现，也可用于测试新配置或安装的网络设备。 [1] 

调用流程


socket():创建套接字
bind():制定本地地址
connect():将套接字连接到目的地址
listen():设置等待连接状态
accept():接受连接请求
send()/recv()　和sendto()/recvfrom():发送和接收数据
closesocket():关闭套接字
